//
//  Translator.swift
//  Life-Translator
//
//  Created by Robin Champsaur on 14/06/2017.
//  Copyright Â© 2017 Robin Champsaur. All rights reserved.
//

import Foundation
import Alamofire
import SWXMLHash

class Translator {
    
    var token: String = ""
    var finalTranslationFirst = "Loading..."
    var finalTranslationSecond = "Loading..."
    
    /**
     Function fetching a translation token from Microsoft text translate API
     */
    @objc func getToken() {
        let url = "https://api.cognitive.microsoft.com/sts/v1.0/issueToken"
        let headers: HTTPHeaders = ["Ocp-Apim-Subscription-Key": ocpKey ]
        
        Alamofire.request(url, method: .post, headers: headers).response { response in
            print(response.error ?? "Error alamo")
            if response.error != nil {
                Timer.scheduledTimer(timeInterval: 3, target: self, selector: #selector(self.getToken), userInfo: nil, repeats: false)
            } else{
                self.token = String(data: response.data!, encoding: String.Encoding.utf8) as String!
            }
        }
        
        Timer.scheduledTimer(timeInterval: 540, target: self, selector: #selector(self.getToken), userInfo: nil, repeats: false)
    }
    
    func relay(to: String, word: String, number: Int){
        if number == 1 {
            translate(to: to, word: word, saver: 1)
        } else {
            translate(to: to, word: word, saver: 2)
        }
    }
    
    /**
     Function translating the object's name (in english) detected by the neural network to the langagues chosen by the user
     */
    func translate(to: String, word: String, saver: Int) {
        if token.count > 0{
            //Building the url
            let url = "https://api.microsofttranslator.com/v2/http.svc/Translate?appid=Bearer%20" +
                self.token + "&text=the%20" + convertWordToTranslatorFormat(word: word) +
                "&from=en" + "&to=" + to
            
            //Analyzing the server answer
            Alamofire.request(url).response { response in
                if (response.error == nil){
                    let xml = SWXMLHash.parse(response.data!)
                    if saver == 1 {
                        self.finalTranslationFirst = xml["string"].element!.text
                    } else {
                        self.finalTranslationSecond = xml["string"].element!.text
                    }
                } else {
                    if saver == 1 {
                        self.finalTranslationFirst = "Error while translating"
                    } else {
                        self.finalTranslationSecond = "Error while translating"
                    }
                }
            }
        } else {
            if saver == 1 {
                self.finalTranslationFirst = "Error while translating"
            } else {
                self.finalTranslationSecond = "Error while translating"
            }
        }
    }
    
    func convertWordToTranslatorFormat(word: String) -> String {
        return word.replacingOccurrences(of: " ", with: "%20", options: .literal, range: nil)
    }
    
    /**
     Function returning translation results
     */
    func sendTranslateResult(saver: Int) -> String {
        if saver == 1 {
            return finalTranslationFirst
        } else {
            return finalTranslationSecond
            
        }
    }
    
    /**
     Function reseting the translation fields
     */
    func resetTranslation() {
        finalTranslationSecond = ""
        finalTranslationFirst = ""
    }
    
    
    /**
     Function going from a flag icon to its associated name in the Microsoft language API
     */
    func convertFlag(flag: String) -> String {
        //[ "ğŸ‡«ğŸ‡·", "ğŸ‡¬ğŸ‡§", "ğŸ‡ªğŸ‡¸", "ğŸ‡©ğŸ‡ª",  "ğŸ‡®ğŸ‡¹", "ğŸ‡µğŸ‡±", "ğŸ‡µğŸ‡¹", "ğŸ‡¬ğŸ‡·", "ğŸ‡ºğŸ‡¸", "ğŸ‡­ğŸ‡¹", "ğŸ‡­ğŸ‡·", "ğŸ‡¨ğŸ‡¿", "ğŸ‡©ğŸ‡°", "ğŸ‡³ğŸ‡±", "ğŸ‡«ğŸ‡®", "ğŸ‡¸ğŸ‡ª", "ğŸ‡³ğŸ‡´", "ğŸ‡®ğŸ‡±", "ğŸ‡®ğŸ‡³", "ğŸ‡¯ğŸ‡µ", "ğŸ‡°ğŸ‡·", "ğŸ‡¹ğŸ‡­", "ğŸ‡®ğŸ‡©", "ğŸ‡»ğŸ‡³", "ğŸ‡·ğŸ‡º", "ğŸ‡·ğŸ‡¸", "ğŸ‡¹ğŸ‡·",  "ğŸ‡ºğŸ‡¦", "ğŸ‡¸ğŸ‡°", "ğŸ‡¸ğŸ‡®",  "ğŸ‡­ğŸ‡º", "ğŸ‡±ğŸ‡¹", "ğŸ‡·ğŸ‡´" ]
        //"ğŸ‡«ğŸ‡·", "ğŸ‡¬ğŸ‡§", "ğŸ‡ªğŸ‡¸", "ğŸ‡©ğŸ‡ª",  "ğŸ‡®ğŸ‡¹",  "ğŸ‡µğŸ‡±", "ğŸ‡µğŸ‡¹", "ğŸ‡¬ğŸ‡·" GOOD - DONE
        //"ğŸ‡­ğŸ‡·", "ğŸ‡¨ğŸ‡¿", "ğŸ‡©ğŸ‡°", "ğŸ‡³ğŸ‡±", "ğŸ‡«ğŸ‡®", "ğŸ‡¸ğŸ‡ª",  "ğŸ‡³ğŸ‡´", GOOD - DONE
        //"ğŸ‡·ğŸ‡º", "ğŸ‡·ğŸ‡¸", "ğŸ‡¹ğŸ‡·",  "ğŸ‡ºğŸ‡¦", "ğŸ‡¸ğŸ‡°", "ğŸ‡¸ğŸ‡®",  "ğŸ‡­ğŸ‡º", "ğŸ‡±ğŸ‡¹", "ğŸ‡·ğŸ‡´" GOOD - DONE
        //"ğŸ‡®ğŸ‡±", "ğŸ‡®ğŸ‡³", GOOD - DONE
        //"ğŸ‡¯ğŸ‡µ", "ğŸ‡°ğŸ‡·", "ğŸ‡¹ğŸ‡­", "ğŸ‡»ğŸ‡³", "ğŸ‡®ğŸ‡©", GOOD - DONE
        //"ğŸ‡ºğŸ‡¸", "ğŸ‡­ğŸ‡¹", GOOD - DONE
        
        switch (flag) {
        //"ğŸ‡«ğŸ‡·", "ğŸ‡¬ğŸ‡§", "ğŸ‡ªğŸ‡¸", "ğŸ‡©ğŸ‡ª",  "ğŸ‡®ğŸ‡¹",  "ğŸ‡µğŸ‡±", "ğŸ‡µğŸ‡¹", "ğŸ‡¬ğŸ‡·"
        case "ğŸ‡«ğŸ‡·" :
            return "fr"
        case "ğŸ‡¬ğŸ‡§" :
            return "en"
        case "ğŸ‡ªğŸ‡¸" :
            return "es"
        case "ğŸ‡©ğŸ‡ª" :
            return "de"
        case "ğŸ‡®ğŸ‡¹" :
            return "it"
        case "ğŸ‡µğŸ‡±" :
            return "pl"
        case "ğŸ‡µğŸ‡¹" :
            return "pt"
        case "ğŸ‡¬ğŸ‡·" :
            return "el"
        //"ğŸ‡­ğŸ‡·", "ğŸ‡¨ğŸ‡¿", "ğŸ‡©ğŸ‡°", "ğŸ‡³ğŸ‡±", "ğŸ‡«ğŸ‡®", "ğŸ‡¸ğŸ‡ª",  "ğŸ‡³ğŸ‡´"
        case "ğŸ‡­ğŸ‡·" :
            return "hr"
        case "ğŸ‡¨ğŸ‡¿" :
            return "cs"
        case "ğŸ‡©ğŸ‡°" :
            return "da"
        case "ğŸ‡³ğŸ‡±" :
            return "nl"
        case "ğŸ‡«ğŸ‡®" :
            return "fi"
        case "ğŸ‡¸ğŸ‡ª" :
            return "sv"
        case "ğŸ‡³ğŸ‡´" :
            return "no"
        //"ğŸ‡®ğŸ‡±", "ğŸ‡®ğŸ‡³"
        case "ğŸ‡®ğŸ‡±" :
            return "he"
        case "ğŸ‡®ğŸ‡³" :
            return "hi"
        //"ğŸ‡¯ğŸ‡µ", "ğŸ‡°ğŸ‡·", "ğŸ‡¹ğŸ‡­", "ğŸ‡»ğŸ‡³",  "ğŸ‡®ğŸ‡©",
        case "ğŸ‡¯ğŸ‡µ" :
            return "ja"
        case "ğŸ‡¨ğŸ‡³" :
            return "zh-CHS"
        case "ğŸ‡°ğŸ‡·" :
            return "ko"
        case "ğŸ‡¹ğŸ‡­" :
            return "th"
        case "ğŸ‡»ğŸ‡³" :
            return "vi"
        case "ğŸ‡®ğŸ‡©" :
            return "id"
        //"ğŸ‡ºğŸ‡¸", "ğŸ‡­ğŸ‡¹"
        case "ğŸ‡ºğŸ‡¸" :
            return "en"
        case "ğŸ‡­ğŸ‡¹" :
            return "ht"
        //"ğŸ‡·ğŸ‡º", "ğŸ‡·ğŸ‡¸", "ğŸ‡¹ğŸ‡·", "ğŸ‡ºğŸ‡¦", "ğŸ‡¸ğŸ‡°", "ğŸ‡¸ğŸ‡®",  "ğŸ‡­ğŸ‡º", "ğŸ‡±ğŸ‡¹", "ğŸ‡·ğŸ‡´" GOOD
        case "ğŸ‡·ğŸ‡º" :
            return "ru"
        case "ğŸ‡·ğŸ‡¸" :
            return "sr-Latn"
        case "ğŸ‡¹ğŸ‡·" :
            return "tr"
        case "ğŸ‡ºğŸ‡¦" :
            return "uk"
        case "ğŸ‡¸ğŸ‡°" :
            return "sk"
        case "ğŸ‡¸ğŸ‡®" :
            return "sl"
        case "ğŸ‡­ğŸ‡º" :
            return "hu"
        case "ğŸ‡±ğŸ‡¹" :
            return "lt"
        case "ğŸ‡·ğŸ‡´":
            return "ro"
            
        default:
            return "en"
        }
    }
}

